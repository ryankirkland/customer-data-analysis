# Write function for replacing state names or wild customer inputs with appropriate two-letter abbreviation

lower_state = {'alabama': 'AL',
 'al': 'AL',
 'n. j.': 'NJ',
 'alaska': 'AK',
 'ak': 'AK',
 'american samoa': 'AS',
 'as': 'AS',
 'arizona': 'AZ',
 'az': 'AZ',
 'arkansas': 'AR',
 'ar': 'AR',
 'california': 'CA',
 'ca': 'CA',
 'colorado': 'CO',
 'co': 'CO',
 'connecticut': 'CT',
 'ct': 'CT',
 'delaware': 'DE',
 'de': 'DE',
 'district of columbia': 'DC',
 'dc': 'DC',
 'florida': 'FL',
 'fl': 'FL',
 'georgia': 'GA',
 'ga': 'GA',
 'guam': 'GU',
 'gu': 'GU',
 'hawaii': 'HI',
 'hi': 'HI',
 'idaho': 'ID',
 'id': 'ID',
 'illinois': 'IL',
 'il': 'IL',
 'indiana': 'IN',
 'in': 'IN',
 'iowa': 'IA',
 'ia': 'IA',
 'kansas': 'KS',
 'ks': 'KS',
 'kentucky': 'KY',
 'ky': 'KY',
 'louisiana': 'LA',
 'la': 'LA',
 'maine': 'ME',
 'me': 'ME',
 'maryland': 'MD',
 'md': 'MD',
 'massachusetts': 'MA',
 'ma': 'MA',
 'michigan': 'MI',
 'mi': 'MI',
 'minnesota': 'MN',
 'mn': 'MN',
 'mississippi': 'MS',
 'ms': 'MS',
 'missouri': 'MO',
 'mo': 'MO',
 'montana': 'MT',
 'mt': 'MT',
 'nebraska': 'NE',
 'ne': 'NE',
 'nevada': 'NV',
 'nv': 'NV',
 'new hampshire': 'NH',
 'nh': 'NH',
 'new jersey': 'NJ',
 'nj': 'NJ',
 'new mexico': 'NM',
 'nm': 'NM',
 'new york': 'NY',
 'ny': 'NY',
 'north carolina': 'NC',
 'nc': 'NC',
 'north dakota': 'ND',
 'nd': 'ND',
 'northern mariana islands': 'MP',
 'mp': 'MP',
 'ohio': 'OH',
 'oh': 'OH',
 'oklahoma': 'OK',
 'ok': 'OK',
 'oregon': 'OR',
 'or': 'OR',
 'pennsylvania': 'PA',
 'pa': 'PA',
 'puerto rico': 'PR',
 'pr': 'PR',
 'rhode island': 'RI',
 'ri': 'RI',
 'south carolina': 'SC',
 'sc': 'SC',
 'south dakota': 'SD',
 'sd': 'SD',
 'tennessee': 'TN',
 'tn': 'TN',
 'texas': 'TX',
 'tx': 'TX',
 'utah': 'UT',
 'ut': 'UT',
 'vermont': 'VT',
 'vt': 'VT',
 'virgin islands': 'VI',
 'vi': 'VI',
 'virginia': 'VA',
 'va': 'VA',
 'washington': 'WA',
 'wa': 'WA',
 'west virginia': 'WV',
 'wv': 'WV',
 'wisconsin': 'WI',
 'wi': 'WI',
 'wyoming': 'WY',
 'wy': 'WY'}

def clean_states(df, col, new_col):
    df[col] = df[col].str.lower()
    df[new_col] = df[col].map(lower_state)
    return df